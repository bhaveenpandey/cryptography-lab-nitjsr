#AffineCipher
#Code Word - HUPHUEPPIVEYUF
#Decrypted Text - RETREATTOBASEX

from math import gcd

# Function to find modular inverse of a modulo m
def mod_inverse(a, m):
    for i in range(1, m):
        if (a * i) % m == 1:
            return i
    return None

# Affine Cipher decryption function
def affine_decrypt(ciphertext, a, b):
    decrypted_text = ""
    m = 26
    a_inv = mod_inverse(a, m)
    if a_inv is None:
        return None
    for char in ciphertext:
        if char.isalpha():
            y = ord(char.upper()) - ord('A')
            x = (a_inv * (y - b)) % m
            decrypted_text += chr(x + ord('A'))
        else:
            decrypted_text += char
    return decrypted_text

# Ciphertext
cipher = "HUPHUEPPIVEYUF"

# Try all valid keys (a must be coprime with 26)
print(" Trying all possible decryptions:\n")
m = 26
for a in range(1, m):
    if gcd(a, m) == 1:  # 'a' must be coprime with 26
        for b in range(0, m):
            decrypted = affine_decrypt(cipher, a, b)
            if decrypted:
                print(f"a={a:2}, b={b:2} -> {decrypted}")
