# aes_pure.py
# Pure-Python AES-128 (ECB) with PKCS#7 padding â€” no external libraries
SBOX = (
  0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
  0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
  0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
  0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
  0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
  0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
  0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
  0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
  0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
  0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
  0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
  0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
  0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
  0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
  0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
  0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
)
INV_SBOX = tuple( SBOX.index(i) for i in range(256) )
RCON = (0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36)

def xtime(a): return ((a<<1) ^ (0x1b if a & 0x80 else 0)) & 0xFF
def mul(a,b):
    r=0
    for i in range(8):
        if b & 1: r ^= a
        hi = a & 0x80
        a = ((a<<1)&0xFF)
        if hi: a ^= 0x1b
        b >>= 1
    return r

def sub_bytes(state): return [SBOX[b] for b in state]
def inv_sub_bytes(state): return [INV_SBOX[b] for b in state]

def shift_rows(s):
    return [
        s[0], s[5], s[10], s[15],
        s[4], s[9], s[14], s[3],
        s[8], s[13], s[2], s[7],
        s[12], s[1], s[6], s[11]
    ]

def inv_shift_rows(s):
    return [
        s[0], s[13], s[10], s[7],
        s[4], s[1], s[14], s[11],
        s[8], s[5], s[2], s[15],
        s[12], s[9], s[6], s[3]
    ]

def mix_columns(s):
    out = [0]*16
    for c in range(4):
        i=4*c
        a = s[i:i+4]
        out[i+0] = xtime(a[0]) ^ (xtime(a[1]) ^ a[1]) ^ a[2] ^ a[3]
        out[i+1] = a[0] ^ xtime(a[1]) ^ (xtime(a[2]) ^ a[2]) ^ a[3]
        out[i+2] = a[0] ^ a[1] ^ xtime(a[2]) ^ (xtime(a[3]) ^ a[3])
        out[i+3] = (xtime(a[0]) ^ a[0]) ^ a[1] ^ a[2] ^ xtime(a[3])
    return out

def inv_mix_columns(s):
    out=[0]*16
    for c in range(4):
        i=4*c
        a=s[i:i+4]
        out[i+0]=mul(a[0],0x0e)^mul(a[1],0x0b)^mul(a[2],0x0d)^mul(a[3],0x09)
        out[i+1]=mul(a[0],0x09)^mul(a[1],0x0e)^mul(a[2],0x0b)^mul(a[3],0x0d)
        out[i+2]=mul(a[0],0x0d)^mul(a[1],0x09)^mul(a[2],0x0e)^mul(a[3],0x0b)
        out[i+3]=mul(a[0],0x0b)^mul(a[1],0x0d)^mul(a[2],0x09)^mul(a[3],0x0e)
    return out

def add_round_key(s, k): return [a^b for a,b in zip(s,k)]

def key_expansion(key):
    assert len(key)==16
    w = [list(key[i:i+4]) for i in range(0,16,4)]
    for i in range(4, 44):
        temp = w[i-1].copy()
        if i % 4 == 0:
            temp = temp[1:]+temp[:1]
            temp = [SBOX[b] for b in temp]
            temp[0] ^= RCON[(i//4)-1]
        w.append([ a ^ b for a,b in zip(w[i-4], temp) ])
    round_keys = [ sum((w[4*r+i][j] << (8*j) for j in range(4)), 0) for r in range(11) for i in range(4) ] # unused format
    # flatten as 16-byte round keys
    rk = []
    for r in range(11):
        rk += [b for i in range(4) for b in w[4*r + i]]
    return [rk[16*r:16*(r+1)] for r in range(11)]

def encrypt_block(block, round_keys):
    s = list(block)
    s = add_round_key(s, round_keys[0])
    for r in range(1,10):
        s = sub_bytes(s)
        s = shift_rows(s)
        s = mix_columns(s)
        s = add_round_key(s, round_keys[r])
    s = sub_bytes(s); s = shift_rows(s); s = add_round_key(s, round_keys[10])
    return bytes(s)

def decrypt_block(block, round_keys):
    s = list(block)
    s = add_round_key(s, round_keys[10])
    s = inv_shift_rows(s); s = inv_sub_bytes(s)
    for r in range(9,0,-1):
        s = add_round_key(s, round_keys[r])
        s = inv_mix_columns(s)
        s = inv_shift_rows(s); s = inv_sub_bytes(s)
    s = add_round_key(s, round_keys[0])
    return bytes(s)

def pkcs7_pad(data):
    padlen = 16 - (len(data) % 16)
    return data + bytes([padlen])*padlen

def pkcs7_unpad(data):
    if not data: return data
    padlen = data[-1]
    if padlen<1 or padlen>16: raise ValueError("Bad padding")
    if data[-padlen:] != bytes([padlen])*padlen: raise ValueError("Bad padding")
    return data[:-padlen]

def aes_encrypt(data, key):
    rk = key_expansion(key)
    data = pkcs7_pad(data)
    out = b''
    for i in range(0, len(data), 16):
        out += encrypt_block(data[i:i+16], rk)
    return out

def aes_decrypt(data, key):
    rk = key_expansion(key)
    out = b''
    for i in range(0, len(data), 16):
        out += decrypt_block(data[i:i+16], rk)
    return pkcs7_unpad(out)

# Example
if __name__ == "__main__":
    key = b"thisis16bytekey"
    plaintext = b"Hello AES in pure Python!"
    print("Plaintext:", plaintext)
    cipher = aes_encrypt(plaintext, key)
    print("Cipher (hex):", cipher.hex())
    plain = aes_decrypt(cipher, key)
    print("Decrypted:", plain)
